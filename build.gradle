plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.11'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "servlinker" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

repositories {

}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }


    withSourcesJar()
}

tasks.jar {

    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// u can add ur mod folder here
def extraDirs = [
        'C:\\Users\\Faceless\\AppData\\Roaming\\ATLauncher\\instances\\Caffeine1214\\mods'
].collect { file(it) }

tasks.register('copyMainJar') {
    dependsOn tasks.named('jar')
    doLast {
        def jarName = "${project.archivesBaseName}-${project.version}.jar"
        def src = file("$buildDir/libs/$jarName")
        extraDirs.each { dir ->
            if (dir.exists() && dir.isDirectory()) {
                copy {
                    from src
                    into dir
                }
            }
        }
    }
}

tasks.named('build') {
    finalizedBy 'copyMainJar'
}

